name: Run Notebook

on:
  schedule:
    - cron: "0 6 * * 1-5"  # Exécute à 06:00 UTC (7h00 CET) du lundi au vendredi
  workflow_dispatch:  # Permet un lancement manuel via GitHub Actions

jobs:
  execute:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Cloner le repo
        uses: actions/checkout@v4  # Récupère le code du repo

      - name: 📂 Lister les fichiers avant exécution
        run: ls -R  # Vérifier la présence des fichiers dans le repo

      - name: 🔧 Installer Python et Jupyter
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 📦 Installer les dépendances nécessaires
        run: pip install jupyter nbconvert requests pandas  # Ajoute tes librairies ici

      - name: 📂 Vérifier le répertoire de travail
        run: echo "📂 Répertoire actuel"

      - name: 🛠️ Créer le dossier de sortie
        run: mkdir -p outputs  # Assure que le dossier existe avant d'écrire les fichiers

      - name: 🚀 Exécuter le notebook
        run: jupyter nbconvert --execute planning.ipynb --to notebook --output executed_script.ipynb

      - name: 📂 Vérifier les fichiers générés après exécution
        run: ls -R outputs/ || echo "⚠️ Aucun fichier trouvé dans outputs/"

      - name: 📂 Sauvegarder le fichier JSON généré
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: json-output
          path: outputs/combined.json  # Assurez-vous que le script sauvegarde ici

      - name: 📂 Sauvegarder le fichier des erreurs généré
        if: always()  # Sauvegarde même si le script échoue
        uses: actions/upload-artifact@v4
        with:
          name: errors-json
          path: outputs/errors.json

      - name: 📂 Sauvegarder le notebook exécuté
        uses: actions/upload-artifact@v4
        with:
          name: executed-notebook
          path: executed_script.ipynb
      - name: 📂 Installer rclone
        run: |
          sudo apt update
          sudo apt install -y rclone
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: 📂 Envoyer les résultats vers Google Drive
        run: rclone copy outputs/ GDrive:ZapierResults/
